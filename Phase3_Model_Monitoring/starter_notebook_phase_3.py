import numpy as np  # For generating random data and performing numerical operations
import pandas as pd  # For handling data in DataFrame format
from evidently.report import Report  # Importing the Evidently report class
from evidently.metric_preset import DataDriftPreset, RegressionPreset  # Metric presets for drift and regression
from evidently import ColumnMapping  # Mapping the columns for use in Evidently
from flask import Flask, send_file  # Flask for serving a simple web application
import smtplib  # For sending email notifications
import os  # For interacting with the operating system

# Get the directory of the current script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Step 1: Import training and test data
try:
    X_train = np.load('X_train.npy')
    y_train = np.load('y_train.npy')
    y_pred_train = np.load('y_pred_train.npy')  # Load training predictions
    X_test = np.load('X_test.npy')
    y_test = np.load('y_test.npy')
    y_pred_test = np.load('y_pred_test_LSTM.npy')  # Load test predictions
except FileNotFoundError as e:
    print(f"Error: {e}")
    exit()

# Flatten the 3D training array to 2D for creating a DataFrame
reference_data_flat = X_train.reshape(X_train.shape[0], -1)

# Create a DataFrame with appropriate column names for the training data
reference_columns = [f'time_{t}_detector{d}' for t in range(X_train.shape[1]) for d in range(X_train.shape[2])]
reference_data = pd.DataFrame(reference_data_flat, columns=reference_columns)
reference_data['target'] = y_train  # The next value for the first feature
reference_data['prediction'] = y_pred_train  # Predictions for the training data

# Flatten the 3D test array to 2D for creating a DataFrame
current_data_flat = X_test.reshape(X_test.shape[0], -1)

# Create a DataFrame with appropriate column names for the test data
current_data = pd.DataFrame(current_data_flat, columns=reference_columns)
current_data['target'] = y_test  # The actual target values for the test data
current_data['prediction'] = y_pred_test  # Predictions for the test data

# Step 2: Define the Column Mapping
# Column mapping tells Evidently which columns represent features, predictions, and the target variable.
# This helps Evidently calculate metrics and understand the data's structure.
feature_columns = [col for col in current_data.columns if col not in ['target', 'prediction']]
features_sample = feature_columns[:10]  # Select the first 10 features as numerical features
column_mapping = ColumnMapping(
    prediction="prediction",  # Column for model predictions
    target="target",  # Column for ground truth labels (target variable)
    numerical_features=features_sample  # List of numerical features in the dataset
)

# Step 3: Set Up Evidently Report for Monitoring Data Drift and Regression Performance
# Initialize an Evidently report, specifying the metrics we want to calculate.
report = Report(metrics=[
    DataDriftPreset(),  # Monitor data drift in features
    RegressionPreset()  # Monitor regression performance (like MAE, MSE)
])

# Run the report on the reference (training) and current (test) data
report.run(reference_data=reference_data, current_data=current_data, column_mapping=column_mapping)

# Save the generated report as an HTML file, which can be viewed in a browser
report_path = os.path.join(script_dir, "evidently_model_report.html")
report.save_html(report_path)
print("Evidently report generated successfully.")

# Step 4: Set Up Flask App to Serve the Monitoring Dashboard
# Initialize a Flask web application for serving the monitoring dashboard
app = Flask(__name__)

@app.route('/monitoring')
def show_dashboard():
    # This route serves the HTML report generated by Evidently
    return send_file('evidently_model_report.html')

# Step 5: Function to Send Email Alerts for Data Drift
def send_email_alert(drift_score):
    sender = 'gregario.eco@gmail.com'  # Sender's email address
    receivers = ['mtbogush@gmail.com']  # List of recipients
    message = f"""Subject: Data Drift Alert

    Data drift detected! The drift score is {drift_score}.
    Please check the monitoring dashboard for further details.
    """

    try:
        smtp_obj = smtplib.SMTP('smtp.gmail.com', 587)
        smtp_obj.starttls()
        smtp_obj.login('gregario.eco@gmail.com', 'faye qfqx bhgw kurg')  # Replace with real email credentials
        smtp_obj.sendmail(sender, receivers, message)
        print("Successfully sent email alert")
    except Exception as e:
        print(f"Error: unable to send email - {e}")

# Step 6: Check Data Drift and Trigger Email Alerts
drift_results = report.as_dict()
dataset_drift = drift_results['metrics'][0]['result']['dataset_drift']  # Access the drift score from the results

drift_threshold = 0.5  # Define a threshold for triggering the alert
if dataset_drift > drift_threshold:
    print(f"Data drift detected! Drift score: {dataset_drift}")
    send_email_alert(dataset_drift)
else:
    print(f"No significant data drift detected. Drift score: {dataset_drift}")

# Step 7: Run the Flask App
if __name__ == "__main__":
    print("Starting the Flask server for monitoring dashboard...")
    app.run(host="0.0.0.0", port=5001)
